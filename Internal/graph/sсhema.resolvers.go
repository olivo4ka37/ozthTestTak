package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"PostCommentService/Internal/graph/model"
	"context"
	"fmt"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, author string) (*model.Post, error) {
	return r.store.CreatePost(title, content, author)
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id int, title string, content string) (*model.Post, error) {
	return r.store.UpdatePost(id, title, content)
}

// DisableComments is the resolver for the disableComments field.
func (r *mutationResolver) DisableComments(ctx context.Context, postID int) (*model.Post, error) {
	err := r.store.DisableComments(postID)
	if err != nil {
		return nil, err
	}
	return r.store.GetPost(postID)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID int, author string, content string, parentID *int) (*model.Comment, error) {
	return r.store.CreateComment(postID, author, content, parentID)
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, id int, content string) (*model.Comment, error) {
	return r.store.UpdateComment(id, content)
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	return r.store.GetPosts()
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int) (*model.Post, error) {
	return r.store.GetPost(id)
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, postID int) (*model.Comment, error) {
	return r.store.GetComment(postID)
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comments(ctx context.Context, postID int) ([]*model.Comment, error) {
	return r.store.GetComments(postID)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID int) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
